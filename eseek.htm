<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>e-Digit Search Benchmark</title>
  <!-- PyScript: brings full Python (decimal, mpmath, etc.) into the browser -->
  <link rel="stylesheet" href="https://pyscript.net/alpha/pyscript.css" />
  <script defer src="https://pyscript.net/alpha/pyscript.js"></script>
  <style>
    body { font-family: sans-serif; max-width: 800px; margin: 2em auto; }
    pre { background: #f5f5f5; padding: 1em; }
    button { margin: 0.5em 0.25em; }
  </style>
</head>
<body>
    https://math-gpt.org/?ref=taaft&utm_source=taaft&utm_medium=referral

  <h1>Benchmark: Finding a 48-digit Pattern in e</h1>
  <p>Pattern: <code>654651899476546654684768465334638436265365123202689</code></p>

  <button py-click="run_decimal_str">Run ‘decimal + str.find’</button>
  <button py-click="run_spigot">Run Spigot + Rolling Window</button>
  <button py-click="run_mpmath">Run mpmath (binary split + FFT)</button>
  <button py-click="run_all">Run All</button>

  <h2>Results</h2>
  <pre id="out">Click a button to start a benchmark…</pre>

  <py-script>
import time
from decimal import Decimal, getcontext
import mpmath

TARGET = "654651899476546654684768465334638436265365123202689"
D = 1_000_000    # how many e‐digits to generate/scan

# 1) decimal → str.find
def run_decimal_str(evt=None):
    out = Element("out")
    out.write("decimal+str.find:\n", append=False)
    getcontext().prec = D + 10
    t0 = time.perf_counter()
    e = sum(Decimal(1) / Decimal(math.factorial(k)) for k in range(0, 1000))
    s = str(e)[2:2+D]      # drop "2."
    t1 = time.perf_counter()
    pos = s.find(TARGET)
    t2 = time.perf_counter()
    out.write(f"  generate {D} digits: {(t1-t0)*1000:.1f} ms\n", append=True)
    out.write(f"  search        : {(t2-t1)*1000:.1f} ms\n", append=True)
    out.write(f"  total         : {(t2-t0)*1000:.1f} ms\n", append=True)
    out.write(f"  position      : {pos if pos>=0 else 'not found'}\n", append=True)

# 2) Spigot + rolling window
def run_spigot(evt=None):
    out = Element("out")
    out.write("Spigot + rolling window:\n", append=False)
    # simple base-10 spigot from Rabinowitz & Wagon
    D = 1_000_000
    A = [2] + [0]*D
    t0 = time.perf_counter()
    window = 0
    pow10 = 10**47
    found = -1
    for i in range(1, D+1):
        carry = 0
        for j in range(D, 0, -1):
            num = 10*A[j] + carry
            A[j], carry = divmod(num, j+1)
        A[0] = carry
        digit = carry
        window = ((window*10) % pow10) + digit
        if i >= 48 and window == int(TARGET):
            found = i - 48 + 1
            break
    t1 = time.perf_counter()
    out.write(f"  scanned up to digit {i}\n", append=True)
    out.write(f"  time: {(t1-t0)*1000:.1f} ms\n", append=True)
    out.write(f"  position: {found if found>0 else 'not found'}\n", append=True)

# 3) mpmath binary-splitting + FFT
def run_mpmath(evt=None):
    out = Element("out")
    out.write("mpmath binary-split + FFT:\n", append=False)
    mpmath.mp.dps = D+10
    t0 = time.perf_counter()
    e = mpmath.e
    s = str(e)[2:2+D]
    t1 = time.perf_counter()
    pos = s.find(TARGET)
    t2 = time.perf_counter()
    out.write(f"  generate+stringize: {(t1-t0)*1000:.1f} ms\n", append=True)
    out.write(f"  search            : {(t2-t1)*1000:.1f} ms\n", append=True)
    out.write(f"  total             : {(t2-t0)*1000:.1f} ms\n", append=True)
    out.write(f"  position          : {pos if pos>=0 else 'not found'}\n", append=True)

# helper: run all in sequence
def run_all(evt=None):
    Element("out").clear()
    run_decimal_str()
    run_spigot()
    run_mpmath()
  </py-script>

</body>
</html>